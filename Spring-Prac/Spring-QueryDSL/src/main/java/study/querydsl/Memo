

1. QueryDsl의 where 검색조건에는
    eq = equal / ne = Not equal (eq().not() 도 가능) / isNotNull / in / Not in / between
    goe = greater or equal / gt = greater then / loe = low or equal / lt = less then
    like = %A / contains = %A% / startWith = A%
    웬만한 sql의 조건식이 다 있다.

2. fetch() 는 리스트 조회 [데이터가 없으면 빈 리스트 반환] | 반환타입 - List<Member>              (반환타입 예시 -> Member)
    fetchOne()은 단건 조회 [결과가 없으면 null, 둘 이상이면 예외 발생] | 반환타입 - Member
    fetchFirst()는 limit(1).fetchOne() | 반환타입 - Member
    fetchResults()는 페이징 정보 포함, total count 쿼리 추가 실행 | 반환타입 - QueryResults<Member>
    fetchCount()는 count 쿼리로 변경해 count 수 조회 등의 역할을 수행함.
    ★ fetchResults / fetchCount 는 향후 미지원 계획. 앞으로 count query가 필요할 경우 직접 작성해서 사용해야함. + p.83 참고.

3. sql로 데이터를 가져올 때에는 항상 최소화 해서 가져오는 습관을 들이도록 하자.
    이렇게 하면 복잡한 쿼리를 짤일이 적어지고 from절의 서브쿼리또한 사용하지 않게 될 것.
    [JPQL의 한계로 from절의 서브쿼리를 지원하지 않는다. nativeSQL를 사용해야할 경우가 생김.]

4. 꼭 데이터를 쿼리 한번으로 해결 할 생각을 버려라.
    복잡한 쿼리는 두번, 세번 나눠 쏘는 것이 성능이 더 좋을 수 있고, 더 현명할 수 있다.

5. 프로젝션 대상이 둘 이상일 경우 반환타입은 Tuple 이나 DTO 로 설정해야한다.

6. DTO의 생성자에 @QueryProjection 어노테이션을 추가하면 DTO를 QType 으로 생성할 수 있다.
    그러나 Dto가 Querydsl에 의존하게된다는 단점이 있다.

7. Repository의 조회쿼리가 한가지 기능에 너무 특화되어있는 경우 굳이 Data-JPA의 custom 기능을 사용하지 않고
    별도의 Repository를 생성하여 해당 기능만을 사용하는 클래스로 코딩해도 지장없다. 이것을 추천하기도 한다.
    (화면기능등에 특화된 경우에 추천, 너무 커스텀기능에 억압되어 설계하지 말 것.)

8. Paging 시 orderBy를 꼭 넣어야한다. 그래야 잘 작동하는지 확인할 수 있음.
    + 페이징 시 count query가 간단하다면 분리해 작성하는 것이 좋다.
    why? where를 사용하면 count query/ join 등 모든 쿼리에 제약조건이 붙어버리기 때문.

9. 쿼리가 복잡해질 수록 count query를 분리하는 것이 더 좋다.
    무조건 한방쿼리에만 집착하지 말것. 쿼리는 때때로 여러번 나눠 날리는것이 효율적일 때가 있다.

10. JPAQueryFactory + EntityManager 주입방법 숙지하기.

11. 조건문 사용 시 if null 보다 hasText( 대상 )을 사용하는 것을 추천함.

12. builder를 사용해 동적쿼리 성능을 최적화할 수 있다. [방법 숙지하기]

13. BooleanExpression을 사용하면 builder보다 더 간결한 코드를 만들 수 있다.
    성능은 비슷하지만 조건의 함수화를 통해 보다 간결해진다. (조건함수 합치기도 가능)
    그 중 다중파라미터 방식을 사용하는 것을 추천한다.

14. 페이징 시 QueryResults<Dto> + .fetchResults()를 사용하면 content + count query를 한번에 날릴 수 있고
    List<Dto> + .fetch() / JPAQuery<Member> countQuery
    + return PageableExecutionUtils.getPage(content, pageable, countQuery::fetchCount)
    를 사용하면 content / count query 를 분리해서 날릴 수 있다.
    자세한건 searchPageSimple / searchPageComplex 참고.

15. JPAQueryFactory를 필드로 빼놓으면 멀티스레드에서의 접근 시 동시성 문제가 터질 수 있지 않을까? 라고 생각하지만
    JPA가 트랜젝션별로 자등으로 분리해줘 문제없다.

16. where 조건절 시 .and()로 조건을 추가하지만 ,로도 추가할 수 있다.

17. 튜플은 배열의 데이터의 타입이 통일되지 않았을 때 사용한다. but, Dto를 더 많이 사용한다.

18. where 대신 .groupBy() + .having 사용 가능.

19. 조인 예시
    일반 조인 : .join(member.team, team)
    세타 조인 : .from(member,team)
    join on : .leftJoin(member.team, team).on(team.name.eq("teamA"))
    페치 조인 : .join(member.team, team).fetchJoin()

20. [.in](JPAExpressions .select( ) .from()) 을 통해서 서브쿼리를 작성할 수 있다.              [.in] 으로 in절 추가 가능.
    그러나 from절의 서브쿼리는 지원하지 않으므로 쿼리를 2번 분할해 작성하거나 Native query를 사용할 것.

21. .concat()을 통해서 쿼리결과의 문자열더하기를 수행할 수 있다.
    ex) .select(member.username.concat("_").concat(member.age.stringValue()))

22. querydsl은  select절에서 Projections.bean([targetDto].class, [targetEntity].targetField) 을 통해 dto를 호출할 수 있다.
    Projections.field( ~ )의 경우에는 .bean과 달리 getter/setter가 필요 없다.
    Projections.constructor( ~ )의 경우에는 DTO의 필드와 뽑아 낼 데이터의 타입을 맞춰줘야한다.
    but, 세 방법 모두 단점이 있으니 .field 방식을 사용하거나 QDto를 생성해서 select절에서 new QDto(targetEntity.field를 사용하자.

23. .update(targetEntity).set(targetField).where(condition) .execute()
    으로 벌크성 수정쿼리를 처리할 수 있다.
    주의점. 벌크연산은 영속성 컨텍스트를 무시하고 db에 바로 쿼리를 전송하기 때문에 db와 영속성 컨텍스트가 매칭이 안된다.
    update 벌크연산 수행 후에는 꼭 flush&clear 하는걸 추천한다. (사실 강제함)

---------------------------------------------------------------------------------------------------------------------
어노테이션
---------------------------------------------------------------------------------------------------------------------
@QueryProjection - 생성자를 통해 DTO를 조회하는 방법과 함께 사용된다. 컴파일 시 타입체크가 가능해 안전하다.
but, Dto가 Querydsl에 의존하게된다는 단점이 있다.

@ToString(of={"id","name"}) - 사용시 클래스가 소유한 필드만 넣을 것.
객체가 가지고 있는 정보나 값들을 문자열로 만들어 리턴하는 메서드 ToString()을 대체해주는 어노테이션
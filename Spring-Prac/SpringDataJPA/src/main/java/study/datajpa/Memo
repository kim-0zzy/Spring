1. JPA의 엔티티는 꼭 protected의  기본 생성자를 갖는다. why? JPA가 proxy기술을 사용할 때 private로 생성되어 있으면 안되기 때문.

2. JPQL은 일반 SQL이 아니라 객체를 대상으로 하는 쿼리이다.

3. Optional은 기본으로 알아두기.

4. @Repository는 컴포넌트 스캔 뿐만 아니라 [ ]의 예외를 스프링에서 공통적으로 처리할 수 있는 예외로 변환해줌. (Entity, Service 도 해당되는지는 모르겠음.)
    [JPQL, JDBC 등등]

5. S-DataJpa는 메서드 이름으로 쿼리를 생성하는 기능을 제공함.

6. 5의 사용법은 pdf 28page에 있음.

7. DTO에는 @Data 써도 되는데 setter기능이 있으니 엔티티에는 절대 사용하지 말 것.

8. 파라미터 바인딩을 할때는 위치기반을 되도록 사용하지 않고 이름기반을 사용할 것.

9. S-DataJpa는 단건, 컬렉션, 옵셔널 등 여러가지 타입을 반환할 수 있다.         [MemberRepository #확인]

10. S-DataJpa의 페이징은 0번부터 시작.

11. 페이지가 0번으로 입력되면 JPA에서 페이지에 대한 쿼리를 생성하지 않음. 없다고 당황하지 말 것.

12. 변경감지에는 데이터를 두개 가져야한다는 단점이 존재한다. [ 변경전 + 변경할 ]

13. S-DataJpa 의 사용자 정의 리포지토리 구현 순서:
    1_ xxxRepositoryCustom 인터페이스 생성 후 해당 인터페이스에 만들고싶은 기능 서술.
    2_ xxxRepositoryImpl 클래스 생성 후 클래스 확장자로 xxxRepositoryCustom 입력 후 만들 메서드 구현. (네이밍에 Impl 필수)
    3_ xxxRepository 에 xxxRepositoryCustom 인터페이스 상속.
    항상 사용자 정의 리포지토리가 필요한건 아니다. 그냥 임의의 리포지토리를 만들어도 된다.
    예를들어 MemberQueryRepository를 인터페이스가 아닌 클래스로 만들고 스프링 빈으로 등록해서
    그냥 직접 사용해도 된다. 물론 이 경우 스프링 데이터 JPA와는 아무런 관계 없이 별도로 동작한다.

14. Auditing : 엔티티 생성, 변경시 변경할 사람과 시간을 추적하는 시스템.            JpaBaseEntity / BaseEntity 참고.

15. S-DataJpa의 모든 기능들은 @Transactional(readOnly = true)를 우선적으로 걸고 시작한다.
    -> 현재 트랜젝션에 속해있지 않더라도 트랜젝션으로 처리할 수 있다는 뜻. (save 등의 메서드는 쓰기전용으로 기본 설정되어있음.)

16. @Transactional에서 (readOnly = true)를 설정하면 변경감지가 일어나지 않는다. = 약간의 성능향상 기대
    -> 쓰기모드에서는 해당 메서드가 끝날 때 플러시가 일어나게 되는데 읽기전용모드에서는 플러시를 생략함.       책 15.4.2 참고

17. ☆★ save() 메서드는 새로운 엔티티면 .persist() 이미 있던거면 .merge()를 사용하기 때문에 주의해야함 ★☆
18.